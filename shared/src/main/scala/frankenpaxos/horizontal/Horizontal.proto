// A protocol cheatsheet, similar to [1].
//
// Normal case operation.
//
//   Client    Leader   Acceptor  Replica
//     |         | ------> |         |     Phase1a
//     |         | <------ |         |     Phase1b
//     | ------> |         |         |     ClientRequest
//     |         | ------> |         |     Phase2a
//     |         | <------ |         |     Phase2b
//     |         | --------^-------> |     Chosen
//     |         | -----.  |         |     Chosen
//     |         | <----'  |         |
//     | <-------^---------^-------- |     ClientReply
//
// Reconfiguration
//
//   Client    Leader   Acceptor  Replica
//     | ------> |         |         |     Reconfigure
//
// Abnormal case operation.
//
//   Client    Leader   Acceptor  Replica
//     | <------ |         |         |     NotLeader
//     | ------> |         |         |     LeaderInfoRequest
//     | <------ |         |         |     LeaderInfoReply
//     |         | <------ |         |     Nack
//     |         | <-------^-------- |     Recover
//     |         |         |    .--- |     Recover
//     |         |         |    '--> |
//
// Driver.
//
//   Driver   Leader    Acceptor  Replica
//     | ------> |         |         |     Die
//     | --------^-------> |         |     Die
//
// [1]: https://ndpsoftware.com/git-cheatsheet.html

// TODO(mwhittaker): Think about implementing noop flushing to force a
// reconfiguration more quickly. It reduces the time to reconfiguration, but
// noop flushing greatly complicates the implementation:
//
//   - An acceptor now has to store a range of noops. Imagine it has a range of
//     noops and then receives a phase2a somewhere in the range. It has to
//     split up the range. So, we'd have to maintain a series of disjoint
//     ranges.
//   - When a leader receives Phase1bs, the responses may include noop ranges.
//     To find a safe value for a given slot, we have to figure out which of
//     the ranges include the slot.
//   - If the leader sends a phase2a for a noop range, an acceptor might have
//     already voted for some values in the range but not others. We'd have to
//     split this range up as well.
//   - If alpha is really big, then replicas have big chunks of noops in their
//     clogs. We instead need some disjoint long with noops plugged into it.
//   - A leader cannot immediately propose a noop chunk or else we may run into
//     alpha overflows. We have to wait a certain amount of time before
//     proposing.
//   - When a leader chooses a chunk of noops, it complicates the computation
//     of things like activeChunks because we're not iterating over slot by
//     slot.

syntax = "proto2";

package frankenpaxos.horizontal;

import "scalapb/scalapb.proto";
import "frankenpaxos/quorums/QuorumSystem.proto";

option (scalapb.options) = {
  package_name: "frankenpaxos.horizontal"
  flat_package: true
};

// Helper messages. ////////////////////////////////////////////////////////////
message Noop {
    
}

message CommandId {
    

  // A client's address, pseudonym, and id uniquely identify a command.
  required bytes client_address = 1;
  required int32 client_pseudonym = 2;
  required int32 client_id = 3;
}

message Command {
    

  required CommandId command_id = 1;
  required bytes command = 2;
}

message Configuration {
    

  required quorums.QuorumSystemProto quorum_system = 1;
}

message Value {
    

  oneof value {
    Command command = 1;
    Noop noop = 2;
    Configuration configuration = 3;
  }
}

message Phase1bSlotInfo {
    

  required int32 slot = 1;
  required int32 vote_round = 2;
  required Value vote_value = 3;
}

// Normal case operations. /////////////////////////////////////////////////////
message Phase1a {
    

  required int32 round = 1;

  // The first slot of this chunk.
  required int32 first_slot = 2;

  // The leader knows that all slots smaller than chosen_watermark have been
  // chosen.
  required int32 chosen_watermark = 3;
}

message Phase1b {
    

  required int32 round = 1;
  required int32 first_slot = 2;
  required int32 acceptor_index = 3;
  repeated Phase1bSlotInfo info = 4;
}

message ClientRequest {
    

  required Command command = 1;
}

message Phase2a {
    

  required int32 slot = 1;
  required int32 round = 2;
  required int32 first_slot = 3;
  required Value value = 4;
}

message Phase2b {
    

  required int32 slot = 1;
  required int32 round = 2;
  required int32 acceptor_index = 3;
}

message Chosen {
    

  required int32 slot = 1;
  required Value value = 2;
}

message ClientReply {
    

  required CommandId command_id = 1;
  required bytes result = 2;
}

// Reconfiguration. ////////////////////////////////////////////////////////////
message Reconfigure {
    

  required Configuration configuration = 1;
}

// Abnormal case operations. ///////////////////////////////////////////////////
message NotLeader {
    
}

message LeaderInfoRequest {
    
}

message LeaderInfoReply {
    

  // The round of the leader (hopefully).
  required int32 round = 1;
}

message Nack {
    

  required int32 round = 1;
}

message Recover {
    

  // Replicas execute logs in prefix order. Thus, if the log permanently has a
  // hole in it, the algorithm remains forever blocked. To solve this, if a
  // replica notices a hole in its log for a certain amount of time, it sends a
  // Recover message to the leader to get the hole plugged.
  required int32 slot = 1;
}

// Driver. /////////////////////////////////////////////////////////////////////
message Die {
    
}

// Inbound messages. ///////////////////////////////////////////////////////////
message ClientInbound {
  oneof request {
    ClientReply client_reply = 1;
    NotLeader not_leader = 2;
    LeaderInfoReply leader_info_reply = 3;
  }
}

message LeaderInbound {
  oneof request {
    Phase1b phase1b = 1;
    ClientRequest client_request = 2;
    Phase2b phase2b = 3;
    Chosen chosen = 4;
    Reconfigure reconfigure = 5;
    LeaderInfoRequest leader_info_request = 6;
    Nack nack = 7;
    Recover recover = 8;
    Die die = 9;
  }
}

message AcceptorInbound {
  oneof request {
    Phase1a phase1a = 1;
    Phase2a phase2a = 2;
    Die die = 3;
  }
}

message ReplicaInbound {
  oneof request {
    Chosen chosen = 1;
    Recover recover = 2;
  }
}
