// A protocol cheatsheet, similar to [1].
//
// Fast path.
//                             Dependency
//                Proposer/     Service
//   Client         Leader        Node         Acceptor
//      | ----------> |             |             |      ClientRequest
//      |             | ----------> |             |      DependencyRequest
//      |             |             | ----------> |      FastProposal
//      |             | <-----------^------------ |      Phase2bFast
//      | <---------- |             |             |      ClientReply
//      |             | ------.     |             |      Commit
//      |             | <-----'     |             |
//
// Slow path.
//                             Dependency
//                Proposer/     Service
//   Client         Leader        Node         Acceptor
//      | ----------> |             |             |      ClientRequest
//      |             | ----------> |             |      DependencyRequest
//      |             |             | ----------> |      FastProposal
//      |             | <-----------^------------ |      Phase2bFast
//      |             | ------------^-----------> |      Phase2a
//      |             | <-----------^------------ |      Phase2bClassic
//      | <---------- |             |             |      ClientReply
//
// Recovery.
//                             Dependency
//                Proposer/     Service
//   Client         Leader        Node         Acceptor
//      |             | ------------^-----------> |      Phase1a
//      |             | <-----------^------------ |      Phase1b
//      |             | ------------^-----------> |      Phase2a
//      |             | <-----------^------------ |      Phase2b
//
// Misc.
//
//                             Dependency
//                Proposer/     Service
//   Client         Leader        Node         Acceptor
//      |             | <-----------^------------ |      Nack
//
// [1]: https://ndpsoftware.com/git-cheatsheet.html

syntax = "proto2";

package frankenpaxos.unanimousbpaxos;

import "scalapb/scalapb.proto";

option (scalapb.options) = {
  package_name: "frankenpaxos.unanimousbpaxos"
  flat_package: true
};

// Helper messages. ////////////////////////////////////////////////////////////
message VertexId {
    

  required int32 leader_index = 1;
  required int32 id = 2;
}

// A special noop command that does not affect the state machine.
message Noop {
    
}

// A client issued command.
message Command {
    

  // The client's address.
  required bytes client_address = 1;

  // Clients use pseudonyms to simulate multiple clients. See Fast MultiPaxos
  // for more explanation.
  required int32 client_pseudonym = 2;

  // Clients annotate every command with a unique and monotonically increasing
  // id. The pair of (client address, client id) uniquely identify a command.
  required int32 client_id = 3;

  // The actual command.
  required bytes command = 4;
}

message CommandOrNoop {
    

  oneof value {
    Command command = 1;
    Noop noop = 2;
  }
}

message VoteValueProto {
  required CommandOrNoop commandOrNoop = 1;
  repeated VertexId dependency = 2;
}

// Protocol messages. //////////////////////////////////////////////////////////
message ClientRequest {
    

  required Command command = 1;
}

message ClientReply {
    

  // The client pseudonym and id of the command.
  required int32 client_pseudonym = 1;
  required int32 client_id = 2;
  required bytes result = 3;
}

message DependencyRequest {
    

  required VertexId vertex_id = 1;
  required Command command = 2;
}

message FastProposal {
    

  required VertexId vertex_id = 1;
  required VoteValueProto value = 2;
}

message Phase1a {
    

  required VertexId vertex_id = 1;
  required int32 round = 2;
}

message Phase1b {
    

  required VertexId vertex_id = 1;
  required int32 acceptor_id = 2;
  required int32 round = 3;
  required int32 vote_round = 4;
  optional VoteValueProto vote_value = 5;
}

message Phase2a {
    

  required VertexId vertex_id = 1;
  required int32 round = 2;
  required VoteValueProto vote_value = 3;
}

message Phase2bFast {
    

  required VertexId vertex_id = 1;
  required int32 acceptor_id = 2;
  required VoteValueProto vote_value = 3;
}

message Phase2bClassic {
    

  required VertexId vertex_id = 1;
  required int32 acceptor_id = 2;
  required int32 round = 3;
}

message Nack {
    

  required VertexId vertex_id = 1;
  required int32 higher_round = 3;
}

message Commit {
    

  required VertexId vertex_id = 1;
  required VoteValueProto value = 2;
}

// Inbound messages. ///////////////////////////////////////////////////////////
message LeaderInbound {
    

  oneof request {
    ClientRequest client_request = 1;
    Phase1b phase1b = 2;
    Phase2bFast phase2b_fast = 3;
    Phase2bClassic phase2b_classic = 4;
    Nack nack = 5;
    Commit commit = 6;
  }
}

message DepServiceNodeInbound {
    

  oneof request {
    DependencyRequest dependency_request = 1;
  }
}

message AcceptorInbound {
    

  oneof request {
    FastProposal fast_proposal = 1;
    Phase1a phase1a = 2;
    Phase2a phase2a = 3;
  }
}

message ClientInbound {
    

  oneof request {
    ClientReply client_reply = 1;
  }
}
